@mixin opacity($opacity: 0) {
    opacity: $opacity;
    -ms-filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})");
    filter: alpha(opacity=#{round($opacity * 100)});
}

@mixin transition($duration, $property: all, $timing-function: linear) {
    -moz-transition: $property $duration $timing-function;
    -webkit-transition: $property $duration $timing-function;
    -o-transition: $property $duration $timing-function;
    transition: $property $duration $timing-function;
}

@mixin user-select($appearance: none) {
    -webkit-touch-callout: $appearance;
    -webkit-user-select: $appearance;
    -khtml-user-select: $appearance;
    -moz-user-select: $appearance;
    -ms-user-select: $appearance;
    user-select: $appearance;
}

@mixin box-sizing($type: border-box) {
    -moz-box-sizing: $type;
    -webkit-box-sizing: $type;
    box-sizing: $type;
}

@mixin box-shadow($shadow: 0 0 10px rgba(0, 0, 0, 0.06)) {
    -moz-box-shadow: $shadow;
    -webkit-box-shadow: $shadow;
    box-shadow: $shadow;
}

@mixin border-radius($radius) {
    -moz-border-radius: $radius;
    -webkit-border-radius: $radius;
    -ms-border-radius: $radius;
    border-radius: $radius;
}

@mixin breakpoint($breakpoint) {
    @if $breakpoint == "big" {
        @media (min-width: 1024px) {
            @content;
        }
    }

    @else if $breakpoint == "not-big" {
        @media (max-width: 1023px) {
            @content;
        }
    }

    @else if $breakpoint == "medium" {
        @media (min-width: 768px) and (max-width: 1023px) {
            @content;
        }
    }

    @else if $breakpoint == "small" {
        @media (max-width: 768px) {
            @content;
        }
    }
}

@mixin background-size($type: 100% cover) {
    -moz-background-size: $type;
    -webkit-background-size: $type;
    background-size: $type;
}

@mixin transform($transforms) {
    -moz-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
}
